[{"content":"\rmemcpy() 函数是 C 标准库中用于内存操作的一个重要函数，它被广泛用于在内存中复制数据块。在系统编程和低级数据操作中，memcpy() 是一个常用且高效的工具。\nmemcpy() 函数的概述 memcpy() 函数用于将指定数量的字节从一个内存位置复制到另一个内存位置。它的操作是直接的、低级的，不会进行任何数据类型的转换或优化。在 string.h 头文件中，memcpy() 的定义如下：\n1 2 3 #include \u0026lt;string.h\u0026gt; void *memcpy(void *dest, const void *src, size_t n); 其中，对于参数而言：\ndest：目标内存地址的指针，表示数据的复制去向。 src：源内存地址的指针，表示数据的复制来源。 n：要复制的字节数。 对于返回值，该函数返回一个通用指针，该指针指向 dest。\n理解 void*。\nvoid* 是一种通用指针（generic pointer）。不同于空指针 NULL 表示一个不指向任何有效内存的特殊指针值，void* 指针可以指向内存中的某个位置，但其指向的数据类型是未确定的（通用的）。\n也正是因为 void* 指针不包含类型信息，所以它是类型不安全的。这意味着我们在使用 void* 时，必须确保正确的将其转换为合适的类型。此外，void* 指针也不能进行指针算术运算（如递增、递减），因为它不包含类型信息，编译器不知道要增加（减少）多少字节。最后，void* 指针也不能被直接解引用，必须将其转换为特定类型的指针。\n为什么 memcpy() 的返回值 void* 指向目标内存地址？\n函数链式调用的便利性：char *copied_data = memcpy(buffer, source, size);，在这条语句中，memcpy() 返回的指针可以直接被用于 copied_data，不需要额外的变量或操作。\nmemcpy() 函数的使用示例 以下是一个使用 memcpy() 函数将一个数组的数据复制到另一个数组的示例代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main() { char src[] = \u0026#34;Hello, World!\u0026#34;; char dest[20]; // 使用 memcpy 函数复制数据 memcpy(dest, src, strlen(src) + 1); // +1 是为了包括字符串的终止符 \u0026#39;\\0\u0026#39; printf(\u0026#34;Source: %s\\n\u0026#34;, src); printf(\u0026#34;Destination: %s\\n\u0026#34;, dest); return 0; } 在这个示例中：\n我们定义了一个源数组 src，其中包含字符串 \u0026quot;Hello, World!\u0026quot;。 我们定义了一个目标数组 dest，大小足以容纳源数组的内容。 我们使用 memcpy() 函数将 src 数组的内容复制到 dest 数组。 复制操作包括了字符串的终止符 '\\0'，以确保目标数组中的字符串正确终止。 memcpy() 函数的工作原理 memcpy() 函数的工作原理是直接在内存级别复制字节数据。它不进行任何类型检查或优化，而是逐字节地将数据从源地址复制到目标地址。\n逐字节复制：\nmemcpy() 从源地址 src 开始，逐字节地读取数据，并将这些数据写入到目标地址 dest。 复制的字节数由参数 n 指定。 指针操作：\n源地址和目标地址通过指针传递，因此函数能够直接操作内存地址。 复制操作是按照内存地址的顺序进行的，从 src 开始依次向后复制 n 个字节到 dest。 不处理重叠：\nmemcpy() 假设源和目标内存区域不会重叠。 如果源和目标区域重叠，memcpy() 的行为未定义，可能会导致数据损坏。在这种情况下，应该使用 memmove() 函数。 memcpy() 函数的使用注意事项 内存重叠问题：\nmemcpy() 假设源和目标区域不重叠。如果内存区域重叠，可能会导致数据复制的过程出现问题，数据可能会被覆盖或损坏。 如果你需要在重叠的内存区域之间复制数据，应该使用 memmove()，它能够正确处理重叠区域。 目标内存大小：\n确保目标内存区域 dest 足够大，能够容纳复制的数据。如果目标内存区域不够大，可能会导致内存越界，造成未定义行为或程序崩溃。 类型不匹配：\nmemcpy() 直接复制字节数据，不关心数据的类型。因此，目标和源数据类型不匹配时，需要小心，确保数据类型和大小一致。 速度与效率：\nmemcpy() 是一个低级别的、直接的内存操作函数，通常比逐个元素复制数据更快，但它不进行任何优化。 在处理大块数据时，memcpy() 通常比手动逐字节复制更高效。 memcpy() 函数与其他内存操作函数的比较 memmove() 函数：\nmemmove() 函数类似于 memcpy() 函数，但它能够正确处理源和目标内存区域重叠的情况。 memmove() 在内部处理重叠区域的数据，确保数据不会在复制过程中被覆盖。 strcpy() 函数：\nstrcpy() 函数专用于复制以 \\0 结尾的字符串。 memcpy() 函数可以复制任意类型的内存数据，而不仅仅是字符串。 memset() 函数：\nmemset() 用于将内存区域中的所有字节设置为指定的值。 memcpy() 用于从一个内存区域复制数据到另一个内存区域。 memcpy() 函数的常见应用场景 数据复制：\nmemcpy() 常用于在内存中复制数据块，例如从一个数组复制到另一个数组。 在网络编程中，memcpy() 可以用于将数据包复制到缓冲区。 结构体复制：\n可以用于将一个结构体的数据复制到另一个相同类型的结构体中。例如，复制一个结构体数组的元素到另一个结构体数组。 内存初始化：\n使用 memcpy() 将初始化数据块复制到目标内存区域，以快速设置内存的初始状态。例如，初始化缓冲区或缓存数据。 文件处理：\n在文件 I/O 操作中，memcpy() 可以用于将文件内容读入到内存缓冲区，或将缓冲区的数据写入到文件。 memcpy() 函数的使用代码示例 以下是使用 memcpy() 函数复制结构体数据的示例代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; typedef struct { int id; char name[20]; float salary; } Employee; int main() { Employee emp1 = {1, \u0026#34;John Doe\u0026#34;, 50000.0}; Employee emp2; // 使用 memcpy 复制结构体数据 memcpy(\u0026amp;emp2, \u0026amp;emp1, sizeof(Employee)); printf(\u0026#34;Employee 2 - ID: %d, Name: %s, Salary: %.2f\\n\u0026#34;, emp2.id, emp2.name, emp2.salary); return 0; } 在这个示例中：\n我们定义了一个 Employee 结构体，并创建了两个 Employee 类型的变量 emp1 和 emp2。 使用 memcpy() 将 emp1 的数据复制到 emp2，包括 id、name 和 salary。 复制后，我们打印 emp2 的数据，验证 memcpy() 的复制效果。 ","permalink":"https://oheyu.github.io/zh/posts/tech/memcpy%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/","summary":"memcpy() 函数是 C 标准库中用于内存操作的一个重要函数，它被广泛用于在内存中复制数据块。在系统编程和低级数据操作中，memcpy() 是一个常用且高效的","title":"memcpy()函数详解"},{"content":"\r结构体（Struct） 结构体是一种用户定义的数据类型，允许将不同类型的变量组合在一起作为一个单一的实体进行处理。结构体常用于组织和管理不同类型的数据，使代码更具可读性和可维护性。结构体有如下三个关键特性：\n成员独立：结构体中的每个成员都有自己的内存空间，不同成员之间互不干扰；\n顺序存储：结构体中的成员按照声明的顺序依次存储在内存中，但可能存在字节填充（padding）以满足对齐要求；\n类型混合：结构体中可以包含不同类型的数据成员，例如整型、浮点型和字符数组等。\n以下是一个简短的代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include \u0026lt;iostream\u0026gt; struct Person { char name[50]; int age; float height; }; int main() { Person person = {\u0026#34;Alice\u0026#34;, 30, 1.75}; std::cout \u0026lt;\u0026lt; \u0026#34;Name: \u0026#34; \u0026lt;\u0026lt; person.name \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Age: \u0026#34; \u0026lt;\u0026lt; person.age \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Height: \u0026#34; \u0026lt;\u0026lt; person.height \u0026lt;\u0026lt; std::endl; return 0; } 联合体（Union） 同样的，联合体也是一种用户自定义的数据类型，允许将多个不同类型的变量存储在同一个内存位置。它常用于节省内存，尤其在需要处理多种数据类型但某一时刻只会使用其中一种的情况下。联合体有如下三个关键特性：\n共享内存：联合体中的所有成员共享同一块内存，某一时刻只能有一个成员是有效的；\n节省空间：联合体的大小等于其最大成员的大小；\n类型混合：同样可以包含不同类型的数据成员，但某一时刻只能使用某一个成员变量。\n以下是一个简短的示例代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include \u0026lt;iostream\u0026gt; union Data { int intValue; float flaotValue; char charValue; }; int main() { Data data; data.intValue = 10; std::cout \u0026lt;\u0026lt; \u0026#34;Integer: \u0026#34; \u0026lt;\u0026lt; data.intValue \u0026lt;\u0026lt; std::endl; data.floatValue = 3.14; std::cout \u0026lt;\u0026lt; \u0026#34;Float: \u0026#34; \u0026lt;\u0026lt; data.floatValue \u0026lt;\u0026lt; std::endl; data.charValue = \u0026#39;A\u0026#39;; std::cout \u0026lt;\u0026lt; \u0026#34;Char: \u0026#34; \u0026lt;\u0026lt; data.charValue \u0026lt;\u0026lt; std::endl; return 0; } 结构体与联合体的对比分析 结构体 联合体 内存管理 每个成员都有独立的内存空间 所有成员共享同一内存空间 大小 所有成员大小之和（加上可能的填充字节） 最大成员的大小 数据有效性 结构体变量有效期中，所有成员始终有效 某一时刻，只能有一个成员有效 用途 数据记录、函数返回多个值 嵌入式系统节省内存、硬件寄存器访问 ","permalink":"https://oheyu.github.io/zh/posts/tech/%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E8%81%94%E5%90%88%E4%BD%93/","summary":"结构体（Struct） 结构体是一种用户定义的数据类型，允许将不同类型的变量组合在一起作为一个单一的实体进行处理。结构体常用于组织和管理不同类","title":"结构体与联合体"},{"content":"\r在C、C++语言中，将源代码文件转换成可执行文件涉及多个步骤，主要包括预处理、编译、汇编和链接。\n源代码（Source code）文件 源代码文件包含了一系列人类可读的计算机语言指令。在 C 语言规范中，源代码文件通常以 .c 为拓展名；而在 C++ 语言规范中，源代码文件通常以 .cpp 为拓展名。\n预处理（Preprocessing） 预处理是编译过程的第一步。在这个过程中，预处理器处理源代码文件中以 # 开头的指令。这些指令包括头文件 #include、宏定义 #define 替换、条件编译 #ifdef 等。预处理的结果是一个 “拓展源代码” 文件，通常以 .i 为拓展名。具体来说，“拓展源代码” 是在原始源代码的基础上，展开所有的宏，插入所有头文件的内容，处理所有的条件编译。\n假设有如下的C++源代码文件 “main.cpp” ：\n1 2 3 4 5 6 7 8 // main.cpp #include \u0026lt;iostream\u0026gt; #define PI 3.1415926 int main() { std::cout \u0026lt;\u0026lt; \u0026#34;PI value is \u0026#34; \u0026lt;\u0026lt; PI \u0026lt;\u0026lt; std::endl; return 0; } 预处理后的代码将不包含 “#include” 和 “#define” 指令，而是包含了 “iostream” 的全部内容并替换 “PI” 的值：\n1 2 3 4 5 6 7 // main.i // iostream 内容展开 // 例如 std::ostream, std::cout等的定义 int main() { std::cout \u0026lt;\u0026lt; \u0026#34;PI value is \u0026#34; \u0026lt;\u0026lt; 3.1415926 \u0026lt;\u0026lt; std::endl; return 0; } 编译（Compilation） 编译器将预处理后的代码转换为目标平台的汇编语言。这一步涉及语法分析、语义分析与优化等。编译器输出的是汇编代码，通常以 .s 为拓展名，这些汇编指令是平台相关的，表示如何在特定的硬件上执行程序。编译后的汇编代码可能看起来像这样（以x86平台为例）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 .section .rodata .LC0: .string \u0026#34;PI value is %f\\n\u0026#34; .text .globl main main: pushq %rbp movq %rsp, %rbp subq $16, %rsp movss $0x40490fdb, -4(%rbp) // PI value as float movq $LC0, %rdi leaq -4(%rbp), %rsi call printf movl $0, %eax leave ret 汇编（Assembly） 汇编器将汇编代码转换为机器代码，即二进制指令，这些指令可以由计算机的 CPU 直接执行。汇编器生成的是对象文件（Object file），通常以 .o（Unix/Linux系统）或 .obj（Windows系统）为拓展名。对象文件包含了编译后的代码的机器语言版本，但这些代码还未进行地址绑定。对象文件是二进制文件，通常不可读，但它包含了函数和数据的二进制表示。\n为什么汇编阶段不完成地址绑定? 在汇编阶段，代码被转换成机器可执行的指令。然而，指令中引用的函数和全局变量的具体内存地址通常尚未确定。这些引用被暂时标记为“待定”，直到链接阶段才会被解析和绑定。出现这种情况的原因如下：\n多模块程序：一个大型程序通常由多个源代码文件组成。经过 “预处理、编译、汇编” 这三个步骤后，每个源代码文件会被独立地转换成对象文件。在这个过程中，汇编器仅能处理当前模块中的符号（如函数、全局变量等），而无法得知其他模块中定义的符号的具体地址。因此，在汇编时，这些跨模块的引用会被标记为待定。 库连接：程序可能依赖于多个外部库，这些库在编译和汇编时也是被独立处理的。因此，库函数的具体内存地址在汇编阶段是未知的，汇编器无法将这些地址填入生成的指令中。这些库函数的地址同样会在链接阶段由链接器解析和绑定。 对于上述问题，汇编器和链接器通过重定位解决这一问题：\n重定位记录：汇编器生成的对象文件中包括机器指令和一些符号表，其中符号表记录了未解析的符号及其引用位置。对于同一模块内定义和使用的符号（例如局部变量），汇编器可以直接将地址填入机器指令中；而对于跨模块引用的符号（例如其他源文件或库中的函数和全局变量），汇编器会生成 “重定位表”，标记这些符号为未解析，并记录它们在目标文件中的位置。 链接：在链接阶段，链接器将所有对象文件和库文件合并成一个可执行文件。链接器首先扫描所有目标文件的符号表，构建全局符号表（Global Symbol Table），该表包含了所有模块中定义的符号及其相对地址。接着，链接器通过重定位表，将未解析的符号地址替换为它们在最终可执行文件中的实际地址。链接器将所有模块的代码和数据段重定位到最终的内存地址空间中，这样每个符号都能正确地被引用。 链接（Linking） 链接器处理一个或多个对象文件，解决外部符号引用，可能还会链接运行时库等。链接器将所有对象文件及所需的库文件集合在一起，生成最终的可执行文件（在Windows上是 .exe，在Unix/Linux上通常没有扩展名）。链接器生成的可执行文件包含了所有必要的程序代码、数据和运行时库的引用，这些都已经是准备好可以被操作系统加载和执行的格式。最终的可执行文件实现了特定平台上的 “一次编译，多次运行”。\n","permalink":"https://oheyu.github.io/zh/posts/tech/%E6%BA%90%E6%96%87%E4%BB%B6%E5%88%B0%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E8%BF%87%E7%A8%8B/","summary":"在C、C++语言中，将源代码文件转换成可执行文件涉及多个步骤，主要包括预处理、编译、汇编和链接。 源代码（Source code）文件 源代码文件","title":"源文件到可执行文件的过程"}]