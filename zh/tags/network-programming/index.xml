<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Network Programming on 史玉浩的个人博客</title>
    <link>https://oheyu.github.io/zh/tags/network-programming/</link>
    <description>Recent content in Network Programming on 史玉浩的个人博客</description>
    <generator>Hugo -- 0.127.0</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 24 Mar 2024 08:25:15 +0800</lastBuildDate>
    <atom:link href="https://oheyu.github.io/zh/tags/network-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>浅析epoll_event中的data成员</title>
      <link>https://oheyu.github.io/zh/posts/tech/%E6%B5%85%E6%9E%90epoll_event%E4%B8%AD%E7%9A%84data%E6%88%90%E5%91%98/</link>
      <pubDate>Sun, 24 Mar 2024 08:25:15 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/%E6%B5%85%E6%9E%90epoll_event%E4%B8%AD%E7%9A%84data%E6%88%90%E5%91%98/</guid>
      <description>在 epoll 中，epoll_event 结构体负责存储每个 I/O 事件的相关信息，其中 data 成员是一个设计灵活的关键部分，它允许我们将任意类型的数据与特定的文件</description>
    </item>
    <item>
      <title>事件循环被阻塞时，为什么客户端与服务端仍能建立连接</title>
      <link>https://oheyu.github.io/zh/posts/tech/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E8%A2%AB%E9%98%BB%E5%A1%9E%E6%97%B6%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BB%8D%E8%83%BD%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5/</link>
      <pubDate>Wed, 20 Mar 2024 09:10:27 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E8%A2%AB%E9%98%BB%E5%A1%9E%E6%97%B6%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BB%8D%E8%83%BD%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5/</guid>
      <description>一、事件驱动模型与事件循环 1.1 什么是事件驱动模型？ 事件驱动模型是一种程序设计范式，程序的流程由事件的发生和事件的处理来驱动。在网络服务器中，这</description>
    </item>
    <item>
      <title>深入剖析addrinfo结构体</title>
      <link>https://oheyu.github.io/zh/posts/tech/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90addrinfo%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Thu, 27 Jul 2023 15:32:48 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90addrinfo%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>在网络编程中，特别是在使用套接字编程时，地址解析和管理是一个关键问题。为了简化这个过程，POSIX 标准定义了 addrinfo 结构体和相关函数。 一、addr</description>
    </item>
    <item>
      <title>监听描述符与已连接描述符在网络编程中的区别</title>
      <link>https://oheyu.github.io/zh/posts/tech/%E7%9B%91%E5%90%AC%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E5%B7%B2%E8%BF%9E%E6%8E%A5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%9C%A8%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Wed, 26 Jul 2023 15:22:55 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/%E7%9B%91%E5%90%AC%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E5%B7%B2%E8%BF%9E%E6%8E%A5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%9C%A8%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>一、什么是监听描述符（Listening Descriptor）？ 监听描述符主要用于等待和接受传入的客户端连接请求。它在服务器启动时被创建和配</description>
    </item>
  </channel>
</rss>
