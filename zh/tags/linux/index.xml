<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on 史玉浩的个人博客</title>
    <link>https://oheyu.github.io/zh/tags/linux/</link>
    <description>Recent content in Linux on 史玉浩的个人博客</description>
    <generator>Hugo -- 0.127.0</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 27 Aug 2024 16:28:40 +0800</lastBuildDate>
    <atom:link href="https://oheyu.github.io/zh/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CPP中的可调用对象包装器</title>
      <link>https://oheyu.github.io/zh/posts/tech/cpp%E4%B8%AD%E7%9A%84%E5%8F%AF%E8%B0%83%E7%94%A8%E5%AF%B9%E8%B1%A1%E5%8C%85%E8%A3%85%E5%99%A8/</link>
      <pubDate>Tue, 27 Aug 2024 16:28:40 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/cpp%E4%B8%AD%E7%9A%84%E5%8F%AF%E8%B0%83%E7%94%A8%E5%AF%B9%E8%B1%A1%E5%8C%85%E8%A3%85%E5%99%A8/</guid>
      <description>std::function 是一种通用的模板类，用于封装不同类型的可调用对象并通过统一的接口调用它们，使得处理这些可调用对象变得更加简洁、灵活。 一、什么是 std::f</description>
    </item>
    <item>
      <title>Linux的IO复用之select</title>
      <link>https://oheyu.github.io/zh/posts/tech/linux%E7%9A%84io%E5%A4%8D%E7%94%A8%E4%B9%8Bselect/</link>
      <pubDate>Tue, 19 Mar 2024 20:19:02 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/linux%E7%9A%84io%E5%A4%8D%E7%94%A8%E4%B9%8Bselect/</guid>
      <description>select() 函数作为一种经典的多路复用机制，在处理多个文件描述符（如套接字）时扮演着重要角色。虽然已经过时，但对于我们进一步了解其他复用有极大的帮助。</description>
    </item>
    <item>
      <title>Inet_pton与inet_ntop</title>
      <link>https://oheyu.github.io/zh/posts/tech/inet_pton%E4%B8%8Einet_ntop/</link>
      <pubDate>Thu, 18 Jan 2024 20:47:35 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/inet_pton%E4%B8%8Einet_ntop/</guid>
      <description>在网络编程中，IP 地址的转换和表示是一个常见且重要的任务。为了在程序中处理网络地址，需要将人类可读的字符串形式的 IP 地址转换为计算机可处理的二</description>
    </item>
    <item>
      <title>服务端的accept函数</title>
      <link>https://oheyu.github.io/zh/posts/tech/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84accept%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 13 Jan 2024 10:23:06 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84accept%E5%87%BD%E6%95%B0/</guid>
      <description>一、accept() 函数概述 1.1 定义与作用 accept() 函数用于从监听套接字的已完成连接队列中取出一个已建立的连接，返回一个新的套接字文件描述符，用于与客</description>
    </item>
    <item>
      <title>服务端的listen函数</title>
      <link>https://oheyu.github.io/zh/posts/tech/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84listen%E5%87%BD%E6%95%B0/</link>
      <pubDate>Thu, 04 Jan 2024 10:13:49 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84listen%E5%87%BD%E6%95%B0/</guid>
      <description>listen() 函数在网络编程中是服务器端建立连接的关键步骤。它将套接字设置为被动监听模式，等待客户端的连接请求。本文将深入剖析 listen() 函数，从其定义、参数、返</description>
    </item>
    <item>
      <title>Bind函数</title>
      <link>https://oheyu.github.io/zh/posts/tech/bind%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 02 Jan 2024 09:42:16 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/bind%E5%87%BD%E6%95%B0/</guid>
      <description>一、bind() 函数概述 1.1 定义与作用 bind() 函数用于将一个套接字绑定到一个特定的 本地地址 和 端口号。在服务器程序中，这是一个必不可少的步骤，确保服务</description>
    </item>
    <item>
      <title>那recv函数呢</title>
      <link>https://oheyu.github.io/zh/posts/tech/%E9%82%A3recv%E5%87%BD%E6%95%B0%E5%91%A2/</link>
      <pubDate>Sat, 30 Dec 2023 09:15:37 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/%E9%82%A3recv%E5%87%BD%E6%95%B0%E5%91%A2/</guid>
      <description>recv() 函数是从已连接的套接字接收数据的主要方式。 一、recv() 函数概述 1.1 定义与作用 recv() 函数用于从已连接的套接字中接收数据，主要用于 面向连接的套接</description>
    </item>
    <item>
      <title>Send发送函数</title>
      <link>https://oheyu.github.io/zh/posts/tech/send%E5%8F%91%E9%80%81%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 27 Dec 2023 09:11:19 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/send%E5%8F%91%E9%80%81%E5%87%BD%E6%95%B0/</guid>
      <description>一、send() 函数概述 1.1 定义与作用 send() 函数用于将数据发送到已建立连接的套接字上，主要用于 面向连接的套接字（如 TCP）。它提供了比 write() 更丰富的功</description>
    </item>
    <item>
      <title>Connect究竟连接了个什么鬼</title>
      <link>https://oheyu.github.io/zh/posts/tech/connect%E7%A9%B6%E7%AB%9F%E8%BF%9E%E6%8E%A5%E4%BA%86%E4%B8%AA%E4%BB%80%E4%B9%88%E9%AC%BC/</link>
      <pubDate>Wed, 13 Dec 2023 08:41:43 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/connect%E7%A9%B6%E7%AB%9F%E8%BF%9E%E6%8E%A5%E4%BA%86%E4%B8%AA%E4%BB%80%E4%B9%88%E9%AC%BC/</guid>
      <description>深入解析 connect() 函数：理解、用法与实践 在网络编程中，connect() 函数是客户端建立网络连接的关键步骤。无论是开发简单的客户端应用，还是构建复杂</description>
    </item>
    <item>
      <title>Sockaddr_in结构体</title>
      <link>https://oheyu.github.io/zh/posts/tech/sockaddr_in%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Mon, 11 Dec 2023 22:18:58 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/sockaddr_in%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>这些个结构体哟！！！ 一、sockaddr_in 结构体概述 1.1 定义与作用 sockaddr_in 是用于 IPv4 网络编程的地址结构体，包含了 IP 地址和端口号等信息。在使用套接字</description>
    </item>
    <item>
      <title>Hostent结构体</title>
      <link>https://oheyu.github.io/zh/posts/tech/hostent%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Thu, 07 Dec 2023 22:09:50 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/hostent%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>这万恶的结构体啊！！！ 一、hostent 结构体概述 1.1 定义与作用 hostent 结构体用于描述主机的信息，包括主机名、别名、地址类型、地址长度和地址列表等。</description>
    </item>
    <item>
      <title>Socket函数剖析</title>
      <link>https://oheyu.github.io/zh/posts/tech/socket%E5%87%BD%E6%95%B0%E5%89%96%E6%9E%90/</link>
      <pubDate>Sat, 25 Nov 2023 21:39:21 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/socket%E5%87%BD%E6%95%B0%E5%89%96%E6%9E%90/</guid>
      <description>之前也断断续续接触过Linux下的网络编程，相关内容一放下就很难记起来，还是用得太少。今天开始，准备系统地、持续地学习一下相关内容。今天，就</description>
    </item>
    <item>
      <title>再探信号量：互斥锁与生产者 消费者模型</title>
      <link>https://oheyu.github.io/zh/posts/tech/%E5%86%8D%E6%8E%A2%E4%BF%A1%E5%8F%B7%E9%87%8F%E4%BA%92%E6%96%A5%E9%94%81%E4%B8%8E%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Tue, 31 Oct 2023 10:48:51 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/%E5%86%8D%E6%8E%A2%E4%BF%A1%E5%8F%B7%E9%87%8F%E4%BA%92%E6%96%A5%E9%94%81%E4%B8%8E%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</guid>
      <description>并发编程中，信号量（Semaphore）作为一种强大的同步工具，可以有效地控制多个线程或进程对共享资源的访问。C++ 提供了信号量的基本操作接</description>
    </item>
    <item>
      <title>进程间同步：信号量</title>
      <link>https://oheyu.github.io/zh/posts/tech/%E8%BF%9B%E7%A8%8B%E9%97%B4%E5%90%8C%E6%AD%A5%E4%BF%A1%E5%8F%B7%E9%87%8F/</link>
      <pubDate>Fri, 06 Oct 2023 09:45:57 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/%E8%BF%9B%E7%A8%8B%E9%97%B4%E5%90%8C%E6%AD%A5%E4%BF%A1%E5%8F%B7%E9%87%8F/</guid>
      <description>在多任务操作系统中，进程间同步和共享资源的管理是至关重要的。信号量（Semaphore）作为一种经典的同步机制，为控制对共享资源的访问提供了</description>
    </item>
    <item>
      <title>Linux的僵尸进程</title>
      <link>https://oheyu.github.io/zh/posts/tech/linux%E7%9A%84%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Sat, 30 Sep 2023 08:59:03 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/linux%E7%9A%84%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B/</guid>
      <description>在 Linux 和其他类 Unix 系统中，进程管理是保证系统稳定性和高效运行的重要组成部分。其中，僵尸进程（Zombie Process）是一个特殊但常见的问题。</description>
    </item>
    <item>
      <title>进程间的通信</title>
      <link>https://oheyu.github.io/zh/posts/tech/%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Fri, 29 Sep 2023 08:39:02 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</guid>
      <description>进程间通信（IPC，Inter-Process Communication）是 Linux 操作系统中的一个重要组成部分，它允许多个独立进程之间共享数据、</description>
    </item>
    <item>
      <title>共享内存初探</title>
      <link>https://oheyu.github.io/zh/posts/tech/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E5%88%9D%E6%8E%A2/</link>
      <pubDate>Wed, 27 Sep 2023 22:13:57 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E5%88%9D%E6%8E%A2/</guid>
      <description>在操作系统中，进程是独立的执行实体，拥有自己的独立地址空间，无法直接访问其他进程的内存。然而，在多进程程序中，有时需要多个进程之间共享数据，</description>
    </item>
    <item>
      <title>Fork函数的工作原理</title>
      <link>https://oheyu.github.io/zh/posts/tech/fork%E5%87%BD%E6%95%B0%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 25 Sep 2023 17:08:06 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/fork%E5%87%BD%E6%95%B0%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid>
      <description>在 Linux 系统编程中，fork() 函数是创建新进程的基础工具之一。它允许进程在运行时创建自己的副本，即子进程，从而实现并行处理。今天，我们来详细探</description>
    </item>
    <item>
      <title>Ulimit：资源限制与性能优化</title>
      <link>https://oheyu.github.io/zh/posts/tech/ulimit%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
      <pubDate>Fri, 15 Sep 2023 15:27:16 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/ulimit%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
      <description>在 Linux 和 Unix 系统中，系统资源的合理分配和限制是确保系统稳定性和性能的关键。而 ulimit 命令正是用于管理和控制用户进程的资源限制的工具。通过 ulimit，</description>
    </item>
    <item>
      <title>Linux退出状态码</title>
      <link>https://oheyu.github.io/zh/posts/tech/linux%E9%80%80%E5%87%BA%E7%8A%B6%E6%80%81%E7%A0%81/</link>
      <pubDate>Fri, 25 Aug 2023 21:14:56 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/linux%E9%80%80%E5%87%BA%E7%8A%B6%E6%80%81%E7%A0%81/</guid>
      <description>在 Unix 和 Linux 系统中，每个命令或程序在执行后都会返回一个退出状态码（Exit Status Code），用于指示该命令的执行结果。echo $? 是一个简单但非常有用</description>
    </item>
    <item>
      <title>Linux信号机制及其在CPP中的实现</title>
      <link>https://oheyu.github.io/zh/posts/tech/linux%E4%BF%A1%E5%8F%B7%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%85%B6%E5%9C%A8cpp%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 18 Aug 2023 20:05:41 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/linux%E4%BF%A1%E5%8F%B7%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%85%B6%E5%9C%A8cpp%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>在 UNIX/Linux 操作系统中，信号（Signal）是一种进程间的通信机制，用于通知进程特定的事件发生。信号是异步的，允许进程在无需轮询的情况下处理来自系统</description>
    </item>
    <item>
      <title>Linux中的符号链接与符号链接所引用的文件</title>
      <link>https://oheyu.github.io/zh/posts/tech/linux%E4%B8%AD%E7%9A%84%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5%E4%B8%8E%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5%E6%89%80%E5%BC%95%E7%94%A8%E7%9A%84%E6%96%87%E4%BB%B6/</link>
      <pubDate>Tue, 01 Aug 2023 21:58:41 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/linux%E4%B8%AD%E7%9A%84%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5%E4%B8%8E%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5%E6%89%80%E5%BC%95%E7%94%A8%E7%9A%84%E6%96%87%E4%BB%B6/</guid>
      <description>在操作系统中，符号链接（Symbolic Link）是一种常用的文件系统功能，它允许用户通过快捷方式访问其他文件或目录。 一、什么是符号链接？ 符</description>
    </item>
    <item>
      <title>Fg命令</title>
      <link>https://oheyu.github.io/zh/posts/tech/fg%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 30 Jul 2023 15:49:00 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/fg%E5%91%BD%E4%BB%A4/</guid>
      <description>fg 命令是 Unix 和类 Unix 操作系统中的一个重要命令，用于将后台运行的任务（进程）恢复到前台。它的全称是 &amp;ldquo;foreground&amp;rdquo;</description>
    </item>
    <item>
      <title>Linux手册页指南：了解各章节及其使用场景</title>
      <link>https://oheyu.github.io/zh/posts/tech/linux%E6%89%8B%E5%86%8C%E9%A1%B5%E6%8C%87%E5%8D%97%E4%BA%86%E8%A7%A3%E5%90%84%E7%AB%A0%E8%8A%82%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</link>
      <pubDate>Mon, 24 Jul 2023 20:59:07 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/linux%E6%89%8B%E5%86%8C%E9%A1%B5%E6%8C%87%E5%8D%97%E4%BA%86%E8%A7%A3%E5%90%84%E7%AB%A0%E8%8A%82%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</guid>
      <description>Linux 手册页（man pages）是每个 Linux 用户和开发者的重要资源。它们提供了关于各种命令、系统调用、库函数、文件格式等的详细信息。手册页分为多个章</description>
    </item>
    <item>
      <title>Ubuntu系统快照是个什么玩意儿</title>
      <link>https://oheyu.github.io/zh/posts/tech/ubuntu%E7%B3%BB%E7%BB%9F%E5%BF%AB%E7%85%A7%E6%98%AF%E4%B8%AA%E4%BB%80%E4%B9%88%E7%8E%A9%E6%84%8F%E5%84%BF/</link>
      <pubDate>Fri, 14 Jul 2023 16:24:40 +0800</pubDate>
      <guid>https://oheyu.github.io/zh/posts/tech/ubuntu%E7%B3%BB%E7%BB%9F%E5%BF%AB%E7%85%A7%E6%98%AF%E4%B8%AA%E4%BB%80%E4%B9%88%E7%8E%A9%E6%84%8F%E5%84%BF/</guid>
      <description>Ubuntu 系统快照是一种用于捕捉和保存系统当前状态的技术。这种技术允许用户在将来某个时间点恢复到快照创建时的系统状态。这对于备份、系统更新前的保护、</description>
    </item>
  </channel>
</rss>
